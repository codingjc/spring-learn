group project_group					// 组织名称
version project_version 					// 项目版本
apply from: 'dependencies.gradle' // 导入依赖配置
def env = System.getProperty("env") ?: 'dev' 		// 获取env环境属性
subprojects { 						// 配置子项目
    apply plugin: 'java' 					// 子模块插件
    sourceCompatibility = project_jdk			// 源代码版本
    targetCompatibility = project_jdk 			// 生成类版本
    repositories { 					// 配置Gradle仓库
        mavenLocal()					// Maven本地仓库
        maven{ 						// 阿里云仓库
            allowInsecureProtocol = true
            url 'http://maven.aliyun.com/nexus/content/groups/public/'}
        maven { // spring官方仓库
            allowInsecureProtocol = true
            url 'https://repo.spring.io/libs-milestone'
        }
        mavenCentral()					// Maven远程仓库
    }
    dependencies {					// 公共依赖库管理
        // 以下的配置为JUnit测试相关的依赖库
        testImplementation(enforcedPlatform(libraries.'junit-bom'))
        testImplementation(libraries.'junit-jupiter-api')
        testImplementation(libraries.'junit-vintage-engine')
        testImplementation(libraries.'junit-jupiter-engine')
        testImplementation(libraries.'junit-platform-launcher')
        testImplementation(libraries.'spring-test')
        // 以下的配置为日志组件的依赖库
        implementation(libraries.'slf4j-api')
        implementation(libraries.'logback-classic')
    }
    sourceSets {						// 源代码目录配置
        main {						// main及相关子目录配置
            java { srcDirs = ['src/main/java'] }
            resources { srcDirs = ['src/main/resources', "src/main/profiles/$env"] }
        }
        test { 						// test及相关子目录配置
            java { srcDirs = ['src/test/java'] }
            resources { srcDirs = ['src/test/resources'] }
        }
    }
    test { 						// 配置测试任务
        useJUnitPlatform()					// 使用JUnit测试平台
    }
    task sourceJar(type: Jar, dependsOn: classes) {		// 源代码的打包任务
        archiveClassifier = 'sources'			// 设置文件的后缀
        from sourceSets.main.allSource			// 所有源代码的读取路径
    }
    task javadocTask(type: Javadoc) { 			// JavaDoc文档打包任务
        options.encoding = 'UTF-8'				// 设置文件编码
        source = sourceSets.main.allJava 			// 定义所有的Java源代码
    }
    task javadocJar(type: Jar, dependsOn: javadocTask) {	// 先生成JavaDoc再打包
        archiveClassifier = 'javadoc'			// 文件标记类型
        from javadocTask.destinationDir 			// 通过Javadoc任务找到目标路径
    }
    tasks.withType(Javadoc) {            			// 文档编码配置
        options.encoding = 'UTF-8'            		// 定义编码
    }
    tasks.withType(JavaCompile) {        			// 编译编码配置
        options.encoding = 'UTF-8'				// 定义编码
    }
    artifacts {  						// 最终打包的操作任务
        archives sourceJar 				// 源代码打包
        archives javadocJar				// javadoc打包
    }
    gradle.taskGraph.whenReady { 				// 在所有的操作准备好后触发
        tasks.each { task -> 				// 找出所有的任务
            if (task.name.contains('test')) { 		// 如果发现有test任务
                task.enabled = true 				// 执行测试任务
            }
        }
    }
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'// 编码配置
}
project(":base") {
    dependencies{
        implementation(libraries.'spring-context')
        implementation(libraries.'spring-core')
        implementation(libraries.'spring-context-support')
        implementation(libraries.'spring-beans')
    }
}